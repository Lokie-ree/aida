{
  "project": "A.I.D.A. (AI Instructional Design Assistant)",
  "version": "1.0.0",
  "description": "Data contracts for the A.I.D.A. Convex backend database schema",
  "generatedAt": "2025-01-27T22:39:27.771Z",
  "deploymentUrl": "kindly-setter-935.convex.cloud",
  "database": {
    "tables": {
      "users": {
        "description": "User accounts and authentication data",
        "schema": {
          "_id": {
            "type": "Id<users>",
            "required": true,
            "description": "Unique document identifier"
          },
          "_creationTime": {
            "type": "number",
            "required": true,
            "description": "Timestamp when document was created"
          },
          "email": {
            "type": "string",
            "required": false,
            "description": "User's email address"
          },
          "isAnonymous": {
            "type": "boolean",
            "required": false,
            "description": "Whether user is anonymous"
          }
        },
        "indexes": [
          {
            "name": "email",
            "fields": ["email", "_creationTime"],
            "description": "Index for email-based queries"
          },
          {
            "name": "phone",
            "fields": ["phone", "_creationTime"],
            "description": "Index for phone-based queries"
          }
        ],
        "relationships": {
          "ownedSpaces": "spaces.ownerId -> users._id",
          "spaceMemberships": "spaceMembers.userId -> users._id",
          "documents": "documents.userId -> users._id",
          "chatMessages": "chatMessages.userId -> users._id",
          "feedbackSessions": "feedbackSessions.userId -> users._id",
          "scrapedWebsites": "scrapedWebsites.userId -> users._id",
          "auditLogs": "auditLogs.userId -> users._id"
        }
      },
      "authSessions": {
        "description": "User authentication sessions",
        "schema": {
          "_id": {
            "type": "Id<authSessions>",
            "required": true,
            "description": "Unique session identifier"
          },
          "_creationTime": {
            "type": "number",
            "required": true,
            "description": "Session creation timestamp"
          },
          "expirationTime": {
            "type": "number",
            "required": true,
            "description": "Session expiration timestamp"
          },
          "userId": {
            "type": "Id<users>",
            "required": true,
            "description": "Reference to user"
          }
        },
        "indexes": [
          {
            "name": "userId",
            "fields": ["userId", "_creationTime"],
            "description": "Index for user session queries"
          }
        ]
      },
      "authAccounts": {
        "description": "External authentication provider accounts",
        "schema": {
          "_id": {
            "type": "Id<authAccounts>",
            "required": true,
            "description": "Unique account identifier"
          },
          "_creationTime": {
            "type": "number",
            "required": true,
            "description": "Account creation timestamp"
          },
          "provider": {
            "type": "string",
            "required": true,
            "description": "Authentication provider name"
          },
          "providerAccountId": {
            "type": "string",
            "required": true,
            "description": "Provider-specific account ID"
          },
          "secret": {
            "type": "string",
            "required": false,
            "description": "Encrypted secret data"
          },
          "userId": {
            "type": "Id<users>",
            "required": true,
            "description": "Reference to user"
          }
        },
        "indexes": [
          {
            "name": "providerAndAccountId",
            "fields": ["provider", "providerAccountId", "_creationTime"],
            "description": "Index for provider account lookups"
          },
          {
            "name": "userIdAndProvider",
            "fields": ["userId", "provider", "_creationTime"],
            "description": "Index for user provider queries"
          }
        ]
      },
      "authRefreshTokens": {
        "description": "Refresh tokens for session management",
        "schema": {
          "_id": {
            "type": "Id<authRefreshTokens>",
            "required": true,
            "description": "Unique token identifier"
          },
          "_creationTime": {
            "type": "number",
            "required": true,
            "description": "Token creation timestamp"
          },
          "expirationTime": {
            "type": "number",
            "required": true,
            "description": "Token expiration timestamp"
          },
          "firstUsedTime": {
            "type": "number",
            "required": false,
            "description": "When token was first used"
          },
          "parentRefreshTokenId": {
            "type": "Id<authRefreshTokens>",
            "required": false,
            "description": "Parent token for token rotation"
          },
          "sessionId": {
            "type": "Id<authSessions>",
            "required": true,
            "description": "Reference to session"
          }
        },
        "indexes": [
          {
            "name": "sessionId",
            "fields": ["sessionId", "_creationTime"],
            "description": "Index for session token queries"
          },
          {
            "name": "sessionIdAndParentRefreshTokenId",
            "fields": ["sessionId", "parentRefreshTokenId", "_creationTime"],
            "description": "Index for token hierarchy queries"
          }
        ]
      },
      "authVerificationCodes": {
        "description": "Email/phone verification codes",
        "schema": {
          "_id": {
            "type": "Id<authVerificationCodes>",
            "required": true,
            "description": "Unique verification code identifier"
          },
          "_creationTime": {
            "type": "number",
            "required": true,
            "description": "Code creation timestamp"
          },
          "accountId": {
            "type": "Id<authAccounts>",
            "required": true,
            "description": "Reference to auth account"
          },
          "code": {
            "type": "string",
            "required": true,
            "description": "Verification code"
          },
          "emailVerified": {
            "type": "string",
            "required": false,
            "description": "Email verification status"
          },
          "expirationTime": {
            "type": "number",
            "required": true,
            "description": "Code expiration timestamp"
          },
          "phoneVerified": {
            "type": "string",
            "required": false,
            "description": "Phone verification status"
          },
          "provider": {
            "type": "string",
            "required": true,
            "description": "Verification provider"
          },
          "verifier": {
            "type": "string",
            "required": false,
            "description": "Verification verifier"
          }
        },
        "indexes": [
          {
            "name": "accountId",
            "fields": ["accountId", "_creationTime"],
            "description": "Index for account verification queries"
          },
          {
            "name": "code",
            "fields": ["code", "_creationTime"],
            "description": "Index for code lookups"
          }
        ]
      },
      "authRateLimits": {
        "description": "Rate limiting for authentication attempts",
        "schema": {
          "_id": {
            "type": "Id<authRateLimits>",
            "required": true,
            "description": "Unique rate limit identifier"
          },
          "_creationTime": {
            "type": "number",
            "required": true,
            "description": "Rate limit creation timestamp"
          },
          "attemptsLeft": {
            "type": "number",
            "required": true,
            "description": "Remaining attempts"
          },
          "identifier": {
            "type": "string",
            "required": true,
            "description": "Rate limit identifier (IP, email, etc.)"
          },
          "lastAttemptTime": {
            "type": "number",
            "required": true,
            "description": "Last attempt timestamp"
          }
        },
        "indexes": [
          {
            "name": "identifier",
            "fields": ["identifier", "_creationTime"],
            "description": "Index for rate limit lookups"
          }
        ]
      },
      "authVerifiers": {
        "description": "OAuth verification state",
        "schema": {
          "_id": {
            "type": "Id<authVerifiers>",
            "required": true,
            "description": "Unique verifier identifier"
          },
          "_creationTime": {
            "type": "number",
            "required": true,
            "description": "Verifier creation timestamp"
          },
          "sessionId": {
            "type": "Id<authSessions>",
            "required": false,
            "description": "Reference to session"
          },
          "signature": {
            "type": "string",
            "required": false,
            "description": "Verification signature"
          }
        },
        "indexes": [
          {
            "name": "signature",
            "fields": ["signature", "_creationTime"],
            "description": "Index for signature lookups"
          }
        ]
      },
      "spaces": {
        "description": "Collaborative workspaces for team sharing",
        "schema": {
          "_id": {
            "type": "Id<spaces>",
            "required": true,
            "description": "Unique space identifier"
          },
          "_creationTime": {
            "type": "number",
            "required": true,
            "description": "Space creation timestamp"
          },
          "name": {
            "type": "string",
            "required": true,
            "description": "Space name"
          },
          "ownerId": {
            "type": "Id<users>",
            "required": true,
            "description": "Space owner user ID"
          }
        },
        "indexes": [
          {
            "name": "by_owner",
            "fields": ["ownerId", "_creationTime"],
            "description": "Index for owner space queries"
          }
        ],
        "relationships": {
          "owner": "spaces.ownerId -> users._id",
          "members": "spaceMembers.spaceId -> spaces._id",
          "documents": "documents.spaceId -> spaces._id",
          "chatMessages": "chatMessages.spaceId -> spaces._id",
          "feedbackSessions": "feedbackSessions.spaceId -> spaces._id",
          "scrapedWebsites": "scrapedWebsites.spaceId -> spaces._id",
          "auditLogs": "auditLogs.spaceId -> spaces._id"
        }
      },
      "spaceMembers": {
        "description": "Space membership and invitations",
        "schema": {
          "_id": {
            "type": "Id<spaceMembers>",
            "required": true,
            "description": "Unique membership identifier"
          },
          "_creationTime": {
            "type": "number",
            "required": true,
            "description": "Membership creation timestamp"
          },
          "spaceId": {
            "type": "Id<spaces>",
            "required": true,
            "description": "Reference to space"
          },
          "userId": {
            "type": "Id<users>",
            "required": true,
            "description": "Reference to user"
          },
          "invitationStatus": {
            "type": "union<'pending' | 'accepted'>",
            "required": true,
            "description": "Invitation status"
          },
          "invitedBy": {
            "type": "Id<users>",
            "required": true,
            "description": "User who sent invitation"
          },
          "invitedEmail": {
            "type": "string",
            "required": true,
            "description": "Email address for invitation tracking"
          }
        },
        "indexes": [
          {
            "name": "by_space",
            "fields": ["spaceId", "_creationTime"],
            "description": "Index for space member queries"
          },
          {
            "name": "by_user",
            "fields": ["userId", "_creationTime"],
            "description": "Index for user space queries"
          },
          {
            "name": "by_email",
            "fields": ["invitedEmail", "_creationTime"],
            "description": "Index for email invitation queries"
          }
        ]
      },
      "documents": {
        "description": "Uploaded documents with text content for RAG",
        "schema": {
          "_id": {
            "type": "Id<documents>",
            "required": true,
            "description": "Unique document identifier"
          },
          "_creationTime": {
            "type": "number",
            "required": true,
            "description": "Document creation timestamp"
          },
          "userId": {
            "type": "Id<users>",
            "required": true,
            "description": "Document owner"
          },
          "fileName": {
            "type": "string",
            "required": true,
            "description": "Original file name"
          },
          "fileSize": {
            "type": "number",
            "required": true,
            "description": "File size in bytes"
          },
          "storageId": {
            "type": "Id<_storage>",
            "required": true,
            "description": "Convex storage file ID"
          },
          "contentType": {
            "type": "string",
            "required": true,
            "description": "MIME type of the file"
          },
          "textContent": {
            "type": "string",
            "required": true,
            "description": "Extracted text content for RAG"
          },
          "spaceId": {
            "type": "Id<spaces>",
            "required": false,
            "description": "Associated space (null for personal documents)"
          }
        },
        "indexes": [
          {
            "name": "by_user",
            "fields": ["userId", "_creationTime"],
            "description": "Index for user document queries"
          },
          {
            "name": "by_space",
            "fields": ["spaceId", "_creationTime"],
            "description": "Index for space document queries"
          }
        ]
      },
      "scrapedWebsites": {
        "description": "Web content scraped and processed for RAG",
        "schema": {
          "_id": {
            "type": "Id<scrapedWebsites>",
            "required": true,
            "description": "Unique website identifier"
          },
          "_creationTime": {
            "type": "number",
            "required": true,
            "description": "Website creation timestamp"
          },
          "userId": {
            "type": "Id<users>",
            "required": true,
            "description": "Website owner"
          },
          "url": {
            "type": "string",
            "required": true,
            "description": "Original website URL"
          },
          "title": {
            "type": "string",
            "required": true,
            "description": "Website title"
          },
          "content": {
            "type": "string",
            "required": true,
            "description": "Full scraped content"
          },
          "chunks": {
            "type": "array<string>",
            "required": true,
            "description": "Content split into searchable chunks"
          },
          "metadata": {
            "type": "object",
            "required": true,
            "description": "Website metadata",
            "properties": {
              "description": {
                "type": "string",
                "description": "Website description"
              },
              "ogImage": {
                "type": "string",
                "description": "Open Graph image URL"
              },
              "sourceURL": {
                "type": "string",
                "description": "Source URL"
              }
            }
          },
          "spaceId": {
            "type": "Id<spaces>",
            "required": false,
            "description": "Associated space (null for personal websites)"
          }
        },
        "indexes": [
          {
            "name": "by_user",
            "fields": ["userId", "_creationTime"],
            "description": "Index for user website queries"
          },
          {
            "name": "by_space",
            "fields": ["spaceId", "_creationTime"],
            "description": "Index for space website queries"
          }
        ]
      },
      "chatMessages": {
        "description": "Chat conversation history with context tracking",
        "schema": {
          "_id": {
            "type": "Id<chatMessages>",
            "required": true,
            "description": "Unique message identifier"
          },
          "_creationTime": {
            "type": "number",
            "required": true,
            "description": "Message creation timestamp"
          },
          "userId": {
            "type": "Id<users>",
            "required": true,
            "description": "Message sender"
          },
          "role": {
            "type": "union<'user' | 'assistant'>",
            "required": true,
            "description": "Message role (user or AI assistant)"
          },
          "content": {
            "type": "string",
            "required": true,
            "description": "Message content"
          },
          "contextDocuments": {
            "type": "array<string>",
            "required": false,
            "description": "Document names used as context for this response"
          },
          "contextWebsites": {
            "type": "array<string>",
            "required": false,
            "description": "Website titles used as context for this response"
          },
          "spaceId": {
            "type": "Id<spaces>",
            "required": false,
            "description": "Associated space (null for personal chats)"
          }
        },
        "indexes": [
          {
            "name": "by_user",
            "fields": ["userId", "_creationTime"],
            "description": "Index for user chat queries"
          },
          {
            "name": "by_space",
            "fields": ["spaceId", "_creationTime"],
            "description": "Index for space chat queries"
          }
        ]
      },
      "feedbackSessions": {
        "description": "Lesson plan feedback sessions",
        "schema": {
          "_id": {
            "type": "Id<feedbackSessions>",
            "required": true,
            "description": "Unique feedback session identifier"
          },
          "_creationTime": {
            "type": "number",
            "required": true,
            "description": "Session creation timestamp"
          },
          "userId": {
            "type": "Id<users>",
            "required": true,
            "description": "Feedback requestor"
          },
          "lessonPlan": {
            "type": "string",
            "required": true,
            "description": "Original lesson plan text"
          },
          "feedback": {
            "type": "string",
            "required": true,
            "description": "AI-generated feedback"
          },
          "title": {
            "type": "string",
            "required": false,
            "description": "Optional lesson plan title"
          },
          "spaceId": {
            "type": "Id<spaces>",
            "required": false,
            "description": "Associated space (null for personal feedback)"
          }
        },
        "indexes": [
          {
            "name": "by_user",
            "fields": ["userId", "_creationTime"],
            "description": "Index for user feedback queries"
          },
          {
            "name": "by_space",
            "fields": ["spaceId", "_creationTime"],
            "description": "Index for space feedback queries"
          }
        ]
      },
      "auditLogs": {
        "description": "Security audit logs for FERPA compliance",
        "schema": {
          "_id": {
            "type": "Id<auditLogs>",
            "required": true,
            "description": "Unique audit log identifier"
          },
          "_creationTime": {
            "type": "number",
            "required": true,
            "description": "Log creation timestamp"
          },
          "userId": {
            "type": "Id<users>",
            "required": true,
            "description": "User who performed the action"
          },
          "action": {
            "type": "string",
            "required": true,
            "description": "Action performed (e.g., 'generate_feedback', 'voice_query')"
          },
          "resource": {
            "type": "string",
            "required": true,
            "description": "Resource accessed (e.g., 'lesson_plan', 'district_policy')"
          },
          "details": {
            "type": "string",
            "required": false,
            "description": "Additional details about the action"
          },
          "spaceId": {
            "type": "Id<spaces>",
            "required": false,
            "description": "Associated space (null for personal actions)"
          },
          "timestamp": {
            "type": "number",
            "required": true,
            "description": "Action timestamp"
          },
          "ipAddress": {
            "type": "string",
            "required": true,
            "description": "IP address of the request"
          }
        },
        "indexes": [
          {
            "name": "by_user",
            "fields": ["userId", "_creationTime"],
            "description": "Index for user audit queries"
          },
          {
            "name": "by_space",
            "fields": ["spaceId", "_creationTime"],
            "description": "Index for space audit queries"
          },
          {
            "name": "by_timestamp",
            "fields": ["timestamp", "_creationTime"],
            "description": "Index for time-based audit queries"
          }
        ]
      }
    },
    "systemTables": {
      "_storage": {
        "description": "Convex file storage for document uploads",
        "usage": "Referenced by documents.storageId for file attachments"
      }
    },
    "relationships": {
      "userOwnership": {
        "description": "Users own documents, chat messages, feedback sessions, and scraped websites",
        "tables": ["documents", "chatMessages", "feedbackSessions", "scrapedWebsites"],
        "foreignKey": "userId"
      },
      "spaceCollaboration": {
        "description": "Spaces enable team collaboration on shared resources",
        "tables": ["documents", "chatMessages", "feedbackSessions", "scrapedWebsites", "auditLogs"],
        "foreignKey": "spaceId"
      },
      "spaceMembership": {
        "description": "Users can be members of multiple spaces with different roles",
        "junctionTable": "spaceMembers",
        "references": ["spaces", "users"]
      },
      "authenticationFlow": {
        "description": "Complete authentication system with sessions, accounts, and verification",
        "tables": ["users", "authSessions", "authAccounts", "authRefreshTokens", "authVerificationCodes", "authRateLimits", "authVerifiers"]
      }
    }
  },
  "api": {
    "authentication": {
      "functions": [
        {
          "name": "auth.js:isAuthenticated",
          "type": "Query",
          "description": "Check if user is authenticated",
          "returns": "boolean"
        },
        {
          "name": "auth.js:loggedInUser",
          "type": "Query",
          "description": "Get current logged-in user",
          "returns": "User object or null"
        },
        {
          "name": "auth.js:signIn",
          "type": "Action",
          "description": "Sign in user with credentials",
          "args": {
            "provider": "string (optional)",
            "params": "any (optional)",
            "calledBy": "string (optional)",
            "verifier": "string (optional)",
            "refreshToken": "string (optional)"
          }
        },
        {
          "name": "auth.js:signOut",
          "type": "Action",
          "description": "Sign out current user"
        }
      ]
    },
    "chat": {
      "functions": [
        {
          "name": "chat.js:getChatHistory",
          "type": "Query",
          "description": "Get chat history for user or space",
          "args": {
            "spaceId": "Id<spaces> (optional)"
          }
        },
        {
          "name": "chat.js:sendMessage",
          "type": "Action",
          "description": "Send message with RAG context",
          "args": {
            "message": "string",
            "spaceId": "Id<spaces> (optional)"
          }
        },
        {
          "name": "chat.js:clearChatHistory",
          "type": "Mutation",
          "description": "Clear chat history for user or space",
          "args": {
            "spaceId": "Id<spaces> (optional)"
          }
        }
      ]
    },
    "documents": {
      "functions": [
        {
          "name": "documents.js:generateUploadUrl",
          "type": "Mutation",
          "description": "Generate secure upload URL for document"
        },
        {
          "name": "documents.js:processUploadedDocument",
          "type": "Action",
          "description": "Process uploaded document and add to RAG",
          "args": {
            "storageId": "Id<_storage>",
            "fileName": "string",
            "fileSize": "number",
            "contentType": "string",
            "spaceId": "Id<spaces> (optional)"
          }
        },
        {
          "name": "documents.js:getUserDocuments",
          "type": "Query",
          "description": "Get user's documents",
          "args": {
            "spaceId": "Id<spaces> (optional)"
          }
        },
        {
          "name": "documents.js:searchDocuments",
          "type": "Query",
          "description": "Search documents by content",
          "args": {
            "query": "string",
            "spaceId": "Id<spaces> (optional)"
          }
        }
      ]
    },
    "webScraping": {
      "functions": [
        {
          "name": "scrapingActions.js:scrapeWebsite",
          "type": "Action",
          "description": "Scrape website content using Firecrawl",
          "args": {
            "url": "string",
            "spaceId": "Id<spaces> (optional)"
          }
        },
        {
          "name": "webscraping.js:getUserScrapedWebsites",
          "type": "Query",
          "description": "Get user's scraped websites",
          "args": {
            "spaceId": "Id<spaces> (optional)"
          }
        },
        {
          "name": "webscraping.js:searchScrapedWebsites",
          "type": "Query",
          "description": "Search scraped websites by content",
          "args": {
            "query": "string",
            "spaceId": "Id<spaces> (optional)"
          }
        }
      ]
    },
    "feedback": {
      "functions": [
        {
          "name": "feedback.js:generateFeedback",
          "type": "Action",
          "description": "Generate AI feedback for lesson plan",
          "args": {
            "lessonPlan": "string",
            "title": "string (optional)",
            "spaceId": "Id<spaces> (optional)"
          }
        },
        {
          "name": "feedback.js:getFeedbackHistory",
          "type": "Query",
          "description": "Get feedback history for user or space",
          "args": {
            "spaceId": "Id<spaces> (optional)"
          }
        }
      ]
    },
    "spaces": {
      "functions": [
        {
          "name": "spaces.js:createSpace",
          "type": "Mutation",
          "description": "Create new collaborative space",
          "args": {
            "name": "string",
            "description": "string (optional)"
          }
        },
        {
          "name": "spaces.js:getUserSpaces",
          "type": "Query",
          "description": "Get spaces user is member of"
        },
        {
          "name": "spaces.js:inviteUserToSpace",
          "type": "Mutation",
          "description": "Invite user to space",
          "args": {
            "spaceId": "Id<spaces>",
            "email": "string"
          }
        },
        {
          "name": "spaces.js:acceptInvitation",
          "type": "Mutation",
          "description": "Accept space invitation",
          "args": {
            "invitationId": "Id<spaceMembers>"
          }
        }
      ]
    },
    "rag": {
      "functions": [
        {
          "name": "rag.js:semanticSearch",
          "type": "Action",
          "description": "Semantic search across all content",
          "args": {
            "query": "string",
            "spaceId": "Id<spaces> (optional)",
            "limit": "number (optional)"
          }
        },
        {
          "name": "rag.js:generateResponseWithRAG",
          "type": "Action",
          "description": "Generate AI response with RAG context",
          "args": {
            "message": "string",
            "spaceId": "Id<spaces> (optional)"
          }
        },
        {
          "name": "rag.js:getRAGStats",
          "type": "Query",
          "description": "Get RAG statistics for namespace",
          "args": {
            "spaceId": "Id<spaces> (optional)"
          }
        }
      ]
    },
    "voice": {
      "functions": [
        {
          "name": "vapi.js:processAuthenticatedVoiceQuery",
          "type": "Action",
          "description": "Process voice query with RAG integration",
          "args": {
            "message": "string",
            "spaceId": "Id<spaces> (optional)"
          }
        }
      ],
      "webhooks": [
        {
          "path": "/api/vapi/webhook",
          "method": "POST",
          "description": "Vapi voice assistant webhook endpoint"
        }
      ]
    },
    "security": {
      "functions": [
        {
          "name": "security.js:createAuditLog",
          "type": "Mutation",
          "description": "Create security audit log entry",
          "args": {
            "action": "string",
            "resource": "string",
            "details": "string (optional)",
            "spaceId": "Id<spaces> (optional)"
          }
        },
        {
          "name": "security.js:getUserAuditLogs",
          "type": "Query",
          "description": "Get audit logs for user or space",
          "args": {
            "spaceId": "Id<spaces> (optional)",
            "limit": "number (optional)"
          }
        },
        {
          "name": "security.js:getSecurityStatus",
          "type": "Query",
          "description": "Get security compliance status"
        }
      ]
    }
  },
  "compliance": {
    "FERPA": {
      "description": "Family Educational Rights and Privacy Act compliance",
      "features": [
        "Audit logging for all user actions",
        "Data retention policies (7 years for audit logs, 3 years for feedback)",
        "Secure user authentication and session management",
        "Space-based access control for shared resources"
      ]
    },
    "dataRetention": {
      "auditLogs": "7 years",
      "feedbackSessions": "3 years",
      "chatMessages": "No automatic deletion",
      "documents": "No automatic deletion",
      "scrapedWebsites": "No automatic deletion"
    }
  },
  "integrations": {
    "openai": {
      "description": "GPT-4o-mini for AI responses and embeddings",
      "usage": ["Chat responses", "Feedback generation", "RAG embeddings"]
    },
    "firecrawl": {
      "description": "Web scraping service for content extraction",
      "usage": ["Website content scraping", "Metadata extraction"]
    },
    "vapi": {
      "description": "Voice AI assistant integration",
      "usage": ["Voice queries", "Real-time conversation"]
    },
    "resend": {
      "description": "Email service for notifications",
      "usage": ["Space invitations", "System notifications"]
    }
  },
  "deployment": {
    "environment": "development",
    "url": "https://kindly-setter-935.convex.cloud",
    "dashboard": "https://dashboard.convex.dev/d/kindly-setter-935"
  }
}
